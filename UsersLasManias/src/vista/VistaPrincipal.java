/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import controlador.ControlUsuarios;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Observable;
import java.util.Observer;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import modelo.Usuario;

/**
 *
 * @author Javi
 */
public class VistaPrincipal extends JFrame implements Observer, ItemListener, ListSelectionListener{
    private final int EN_JUEGO = 0;
    private final int CONECTADO = 2;
    private final int NO_CONECTADO = 1;
    private final int AUSENTE = 3;
    private ControlUsuarios  controlador;
    private Set<Usuario> amigos;
    private String nombreUsuario;
    private DefaultListModel listModelNombres;
    private DefaultListModel listModelEstados;
    private ImageIcon imagenBotonNotificaciones;
    private ImageIcon imagenBotonAmigo;
    private ImageIcon imagenNoConectado;
    private ImageIcon imagenConectado;
    private ImageIcon imagenEnJuego;
    
    private final String RUTA_RECURSOS = "./src/recursos/";
    /**
     * Creates new form vistaPrincipal
     */
    public VistaPrincipal(ControlUsuarios _controlador, String _nombreUsuario) {
        initComponents();
        this.setResizable(false);
        this.nombreUsuario = _nombreUsuario;
        this.controlador = _controlador;
        actualizarVista(nombreUsuario);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                acaba();
            }
        });
        imagenBotonNotificaciones = new ImageIcon(RUTA_RECURSOS+"iconNotif.png");
        imagenBotonAmigo = new ImageIcon(RUTA_RECURSOS+"addFriend.png");
        imagenConectado = new ImageIcon(RUTA_RECURSOS+"puntoVerde.png");
        imagenNoConectado = new ImageIcon(RUTA_RECURSOS+"puntoRojo.png");
        imagenEnJuego = new ImageIcon(RUTA_RECURSOS+"puntoAzul.png");
        botonNotificaciones.setIcon(imagenBotonNotificaciones);
        botonAgregarAmigo.setIcon(imagenBotonAmigo);
        seleccionConectados.addItemListener(this);
        listaAmigos.addListSelectionListener(this);
    }

    public void actualizarVista(String _nombreUsuario){
        amigos = controlador.listaAmigos(_nombreUsuario);
        listModelNombres = new DefaultListModel();
        listModelEstados = new DefaultListModel();
        llenarLista();
        listaAmigos.setModel(listModelNombres);
        listaEstados.setModel(listModelEstados);
    }
    public void actualizarVista(String _nombreUsuario, int _estado){
        amigos = controlador.listaAmigosConectados(_nombreUsuario, _estado);
        listModelNombres = new DefaultListModel();
        listModelEstados = new DefaultListModel();
        llenarLista();
        listaAmigos.setModel(listModelNombres);
        listaEstados.setModel(listModelEstados);
    }
    
    /**
     * acaba
     */
    public void acaba() {
        controlador.acaba(nombreUsuario);
        System.exit(0);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        botonAgregarAmigo = new javax.swing.JButton();
        botonNotificaciones = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        botonEliminar = new javax.swing.JButton();
        botonJugar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaAmigos = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaEstados = new javax.swing.JList();
        seleccionConectados = new javax.swing.JRadioButton();
        botonAleatorio = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Las Ma√±as");

        botonAgregarAmigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarAmigoActionPerformed(evt);
            }
        });

        botonNotificaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNotificacionesActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista de amigos"));

        botonEliminar.setText("Eliminar");
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        botonJugar.setText("Jugar");
        botonJugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonJugarActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Nombre de Usuario"));

        jScrollPane1.setViewportView(listaAmigos);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Estado"));

        listaEstados.setEnabled(false);
        jScrollPane2.setViewportView(listaEstados);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        seleccionConectados.setText("Solo conectados");
        seleccionConectados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionConectadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(botonJugar, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(seleccionConectados)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seleccionConectados)
                .addGap(7, 7, 7)
                .addComponent(botonEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonJugar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        botonAleatorio.setText("Oponente aleatorio");
        botonAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAleatorioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(botonAgregarAmigo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonNotificaciones)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113))
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(botonAleatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAgregarAmigo)
                    .addComponent(botonNotificaciones))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonAleatorio)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonAgregarAmigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarAmigoActionPerformed
        VistaAgregarAmigo vAgregarAmigo = new VistaAgregarAmigo(controlador, this, nombreUsuario);
        vAgregarAmigo.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_botonAgregarAmigoActionPerformed

    private void botonNotificacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNotificacionesActionPerformed
        VistaNotificaciones vNotificaciones = new VistaNotificaciones(controlador, this, nombreUsuario);
        vNotificaciones.setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_botonNotificacionesActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed

        if(controlador.eliminarAmigo(nombreUsuario, listaAmigos.getSelectedValue().toString())){
            JOptionPane.showMessageDialog(this, "El amigo se ha eliminado correctamente.");
        }else{
            JOptionPane.showMessageDialog(this, "El amigo no se ha eliminado correctamente.");
        }
    }//GEN-LAST:event_botonEliminarActionPerformed

    private void botonJugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonJugarActionPerformed
        
        if(controlador.enviarNotificacionJugar(nombreUsuario, (String)listaAmigos.getSelectedValue())){
            JOptionPane.showMessageDialog(this, "Tu solicitud para jugar a sido enviada.");
        }else{
            JOptionPane.showMessageDialog(this, "Ha ocurrido un error al enviar la notificaci√≥n.");
        }
        
    }//GEN-LAST:event_botonJugarActionPerformed

    private void botonAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAleatorioActionPerformed
        
        String nombreRandom = controlador.usuarioAleatorio();
        JOptionPane.showMessageDialog(this, "Buscando jugador...");
        //Delay
        if(controlador.enviarNotificacionJugar(nombreUsuario, nombreRandom)){
            JOptionPane.showMessageDialog(this, "Tu solicitud para jugar a sido enviada.");
        }else{
            JOptionPane.showMessageDialog(this, "Ha ocurrido un error al enviar la notificaci√≥n.");
        }
        
        
        
    }//GEN-LAST:event_botonAleatorioActionPerformed

    private void seleccionConectadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionConectadosActionPerformed
        
    }//GEN-LAST:event_seleccionConectadosActionPerformed
    private void llenarLista(){
        int i = 0;
        String estado;
        for (Usuario amigo : amigos) {
            listModelNombres.add(i, amigo);
            switch(amigo.getEstado()){
                case AUSENTE:
                    estado = "Ausente";
                    break;
                case CONECTADO:
                    estado = "Conectado";
                    break;
                case NO_CONECTADO:
                    estado = "Desconectado";
                    break;
                case EN_JUEGO:
                    estado = "En juego";
                    break;
                default:
                    estado = "ERROR";
                    break;
            }
            listModelEstados.add(i, estado);
            i++;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAgregarAmigo;
    private javax.swing.JButton botonAleatorio;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonJugar;
    private javax.swing.JButton botonNotificaciones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listaAmigos;
    private javax.swing.JList listaEstados;
    private javax.swing.JRadioButton seleccionConectados;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        if(arg instanceof String){
            String nombre = (String)arg;
            actualizarVista(nombre);
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getStateChange() == ItemEvent.SELECTED) {
            actualizarVista(nombreUsuario, 2);
    }
    else if (e.getStateChange() == ItemEvent.DESELECTED) {
        actualizarVista(nombreUsuario);
    }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        Usuario usuario = (Usuario)listaAmigos.getSelectedValue();
        if(usuario.getEstado() != CONECTADO){
            botonJugar.setEnabled(false);
        }else{
            botonJugar.setEnabled(true);
        }
    }
}
